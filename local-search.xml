<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>四非保研流水账</title>
    <link href="/2025/06/04/codeforces%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A00604/"/>
    <url>/2025/06/04/codeforces%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A00604/</url>
    
    <content type="html"><![CDATA[<h1 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a><a href="https://codeforces.com/problemset/problem/1774/B">Coloring</a></h1><p><img src="/./assets/image-20250604162316589.png" alt="image-20250604162316589"></p><p>题目可以简单理解为有ceil(n&#x2F;k)个盒子，要求往里面放置颜色不同的球。</p><p>根据题意就要使用鸽巢原理，令c&#x3D;ceil(n&#x2F;k)，如果有一个颜色的出现的次数大于c，那么由鸽巢原理可知必然会出现一个盒子由两种及以上的颜色，因此无解。</p><p>但是即使没有违反该条件的球，也不代表有解，假设最后一个盒子中的球(装球最少的盒子)数量为y，而出现次数为c的颜色的个数为x，如果x&gt;y，要么违反最少的盒子的球的数量要么装到其他盒子中(一个盒子中就会出现两种颜色及以上)，因此要多判断一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(R()):<br>    n,m,k=RR()<br>    nums=RR()<br>    <span class="hljs-comment"># 排序</span><br>    nums.sort()<br>    <span class="hljs-comment"># 计数</span><br>    memo=Counter(nums)<br>    <span class="hljs-comment"># 组数</span><br>    c=ceil(n/k)<br>    <span class="hljs-comment"># 如果一种颜色出现次数大于组数，那么必然有一个组会出现相同的颜色</span><br>    <span class="hljs-keyword">if</span> nums[-<span class="hljs-number">1</span>]&gt;c:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 最后一段的个数</span><br>        tmp=n%k<br>        <span class="hljs-comment"># 可能取模为0的长度为k</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tmp:tmp=k<br>        <span class="hljs-comment"># 如果出现次数为c的颜色的个数大于最后一段的长度，那么必然有一组出现次数大于1</span><br>        <span class="hljs-keyword">if</span> memo[c]&gt;tmp:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;YES&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Password-Cracking"><a href="#Password-Cracking" class="headerlink" title="Password Cracking"></a><a href="https://codeforces.com/problemset/problem/2013/C">Password Cracking</a></h1><p><img src="/./assets/image-20250604162945833.png" alt="image-20250604162945833"></p><p>考虑最简单的变化——在左侧添加第二个字符，在右侧添加倒数第二个字符。</p><p>那么令原字符串为Tcd，其中cd是最后两个字符，那么有变化Tcd→Tcdc→dcT′Tcdc→cdcT′Tcdc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(R()):<br>    n,m,k=RR()<br>    nums=RR()<br>    <span class="hljs-comment"># 排序</span><br>    nums.sort()<br>    <span class="hljs-comment"># 计数</span><br>    memo=Counter(nums)<br>    <span class="hljs-comment"># 组数</span><br>    c=ceil(n/k)<br>    <span class="hljs-comment"># 如果一种颜色出现次数大于组数，那么必然有一个组会出现相同的颜色</span><br>    <span class="hljs-keyword">if</span> nums[-<span class="hljs-number">1</span>]&gt;c:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 最后一段的个数</span><br>        tmp=n%k<br>        <span class="hljs-comment"># 可能取模为0的长度为k</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tmp:tmp=k<br>        <span class="hljs-comment"># 如果出现次数为c的颜色的个数大于最后一段的长度，那么必然有一组出现次数大于1</span><br>        <span class="hljs-keyword">if</span> memo[c]&gt;tmp:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;YES&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Row-Major"><a href="#Row-Major" class="headerlink" title="Row Major"></a><a href="https://codeforces.com/problemset/problem/1844/D">Row Major</a></h1><p><img src="/./assets/image-20250605131946343.png" alt="image-20250605131946343"></p><p><img src="/./assets/image-20250605131953928.png" alt="image-20250605131953928"></p><p>规定了对于n的因数d，不能出现两个距离为d的位置字符相同，在此基础上最小化不同种类的字符数</p><p>为了最小化，那么就找最小的不属于n的因数的正整数x，每隔x去相同的字符，也就是周期为x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(R()):<br>    n=R()<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> n%x==<span class="hljs-number">0</span>:<br>        x+=<span class="hljs-number">1</span><br><br>    ans=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        ans.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+i%x))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(ans))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>codeforces每日构造题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>构造题</tag>
      
      <tag>codeforce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四非保研流水账</title>
    <link href="/2025/06/01/%E4%BF%9D%E7%A0%94%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    <url>/2025/06/01/%E4%BF%9D%E7%A0%94%E6%B5%81%E6%B0%B4%E8%B4%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="西电"><a href="#西电" class="headerlink" title="西电"></a>西电</h1><p>5月12日联系到了一个老师，这是我第二份套磁信，直接就加上微信说愿意给名额，这时人都懵了，保研套磁这么简单吗？激动的不行，一度以为我的保研之旅结束了后面跟着摆一摆就好了。后面考核叫我读论文，然后又电话问了一些背景，电话的交谈感觉这个老师有的PUA——说有个211的女生找他，他没收把机会给我了，说我的项目经历不太行，还暗示了一下发的钱不多，我那时候觉得有点奇怪，不过还是没多想，毕竟拿到offer的喜悦胜过了一切。</p><p>当时没仔细看学校以为西电是9，当场就答应了下来，后面和同学分享的时候才知道是顶2，这时候心里其实是一种矛盾的状态， 因为本身渴望title想要上个9，但是这么好的机会又不想错过，就这样接下来的几天一直纠结，顺带着又去套了厦门大学，结果厦门大学根本没回复，我才意识到套磁的艰难，然后就说服自己心安理得接收西电的offer。</p><p>原本一切都向着好的方向发展，我以为遇到了自己的伯乐，要好好学习报答老师的知遇之恩，结果这个老师十分的push，没过几天就拉着我去进组，先是让我学习旁听组会，过了几天突然叫我汇报(还好我做了点东西)，再过了几天让我参加晨会写日报，我反馈说有周一到周五从早上到晚的实训就暂时没开始，其实到这里还好，这个老师是年轻导师有自己的压力我也能理解，问题出现在后面。</p><p>6月1日叫和其他的学生汇报，一如既往在里面听别人汇报等了2个小时(就在那傻坐着)，我是最后一个汇报的，结束后这个老师质问我为什么进度这么慢，我自认为做的东西还算可以也有不少，我也反馈了我有实训我有自己的事，这是一点都不关心学生自己的任务吗？然后我又重申了一遍实训的事顺带提了下周有两场考试，我不清楚他是忘了还是就不在乎，就这样还是让我下周有进度。这里我就很不满了，现在连大四都没到，我不敢想以后四年的生活会被如何压榨，我原以为拉我进组是让我学习打好基础，现在才回过味来——恨不得我早点发挥出价值。唉，都是制度逼得，也不能多责怪那个老师。</p><p>在这里还要感谢同一组的学长，不顾自己的安危暗示我跑路，学长出身也是非92，当时拿到了东北西电北交的offer，在6月1号开完会后，我问学长时候后悔没选东北，得到的答复是每晚睡觉都在后悔，至此打算跑路，当前晚上就找了其他的西电老师发邮件，为了不连累学长，晚点再跑路。</p><h1 id="苏大"><a href="#苏大" class="headerlink" title="苏大"></a>苏大</h1><p>决定跑路当天晚上就找了个苏大的老师套磁(随便选的)，结果第二天早上就回复了约晚上会议，我又一度以为我们学校去苏大很简单，所以后面又套了个强的老师结果已读不回，小丑了。这个老师是年轻老师，还来过我们学校说是找他哥们玩。一开始挺担心和西电的那个老师一样push压力人的，结果面试的时候还挺好，没有上压力基本上是在闲聊，介绍他的方向，人感觉挺随意大方的，还建议我锻炼身体，总之老师愿意给我留名额，那好苏大就这样吧，其实经过老师的介绍我还挺喜欢这个方向的——嵌入式+人工智能。</p><h1 id="北邮"><a href="#北邮" class="headerlink" title="北邮"></a>北邮</h1><p>北邮是我第一个套的学校(5.8)，当时找的是一个女老师寻思的压力小一点，结果没回复。后来套了一个月就一个老师愿意回复，约了个线上面试(6.5)。值得一提的是，这是第一个叫我开视频的老师，也是第一个问我项目的老师。老师简单的问了下我的项目，也算不上是拷打，但应该看出来这些项目的水。然后问我的竞赛，看到我的算法竞赛比较多，就问了下我对自己的算法水平感觉怎么样，平时做不做力扣，第一个问题我回答说要是不打ICPC就很自信，第二个问题嘛，终于有人问到我力扣了，我自信地说做了1800多道题目，随后老师叫我展示了一下，也算了惊讶了下他。</p><p>随后就是介绍自己的方向，最后问我有什么问题，整个流程感觉很快可能是不太对我感兴趣，结束前说北邮现在面试阶段，夏令营7月份才开，也就是在海，唉，感觉希望不大，不过进了鱼池就有机会。</p><h1 id="吉大"><a href="#吉大" class="headerlink" title="吉大"></a>吉大</h1><p>吉大的老师也是在西电跑路那天晚上决定套的，也是随便找的一个老师，后天早上(设置的定时发送)老师就回信了，说感觉我很优秀愿意价格微信聊一聊。于是乎就加了微信，在中午的时候老师就打了电话，这个过程基本上也是在闲聊，没有问到项目比赛之类的，问的是我为什么对他感兴趣，得益于之前的苏大老师——我对大模型领域产生了浓厚的兴趣，正好老师的方向就有智能化软件工程，我就顺着说了。还问了些我未来的方向，他们目前正在做的事，以及一些理想，总的来说也是一位挺直爽的老师，有东北人那种不加掩饰，非常直白，不会绕弯子，说实话我也挺喜欢这个老师的。老师表示我现在套磁还太早了，说实话我以为自己算晚的了，可能吉大不是西点北邮着这种推荐入选的，所以套的人不多，老师说是挺欣赏我这么早地争取机会，最后说是愿意留个名额，说能理解学生广撒网，也希望拿到offer能提前说一声。这么好的老师骗他浪费他名额我良心上也受不了，希望最能进到吉大的夏令营和预推免，按照老师的说法往年我的学校和成绩还是很容易上吉大的，不过近几年变得卷了，一大堆人去CS&#x2F;SE。至此，吉大的套磁就告一段落。</p>]]></content>
    
    
    <categories>
      
      <category>保研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>保研</tag>
      
      <tag>心路历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 407 题解</title>
    <link href="/2025/05/29/AtCoder%20Beginner%20Contest%20407%20%E9%A2%98%E8%A7%A3%20A-E/"/>
    <url>/2025/05/29/AtCoder%20Beginner%20Contest%20407%20%E9%A2%98%E8%A7%A3%20A-E/</url>
    
    <content type="html"><![CDATA[<h1 id="AtCoder-Beginner-Contest-407"><a href="#AtCoder-Beginner-Contest-407" class="headerlink" title="AtCoder Beginner Contest 407"></a><a href="https://atcoder.jp/contests/abc407">AtCoder Beginner Contest 407</a></h1><h2 id="A-Approximation"><a href="#A-Approximation" class="headerlink" title="A-Approximation"></a>A-Approximation</h2><p><strong>题意</strong>：</p><p>给定一个正整数 $A$ 和一个正的奇整数 $B$，求一个整数，使它与 $\frac{A}{B}$ 的差最小。可以证明，在题目约束下，这样的整数是唯一的。</p><p><strong>数据范围</strong> </p><p><img src="/./../img/image-20250529165538178-1748509237806-1.png" alt="image-20250529165538178"></p><p><strong>输入</strong></p><p><img src="/./../img/image-20250529165549365-1748509237807-2.png" alt="image-20250529165549365"></p><p><strong>题解：</strong></p><p>对于给定的数据范围直接暴力枚举每一个即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">n,odd=RR()<br>a,b=<span class="hljs-built_in">int</span>(n/odd),ceil(n/odd)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(n/odd-a)&lt;<span class="hljs-built_in">abs</span>(n/odd-b):<br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h2 id="B-P-X-or-Y"><a href="#B-P-X-or-Y" class="headerlink" title="B - P(X or Y)"></a>B - P(X or Y)</h2><p><strong>题意</strong>：</p><p> 投掷两个六面骰子（点数分别是 1 到 6），求这两个点数的组合中，有多少种满足如下两个条件之一的情形，并计算其概率：</p><ul><li>两个点数之和 <strong>不小于</strong> $X$；</li><li>两个点数之差的绝对值 <strong>不小于</strong> $Y$。<br> 两个骰子相互独立，且每个面出现的概率相等。</li></ul><p><strong>数据范围</strong>：</p><p><img src="/./../img/image-20250529165456078-1748509237807-4.png" alt="image-20250529165456078"></p><p><strong>输入</strong></p><p><img src="/./../img/image-20250529165507588-1748509237807-6.png" alt="image-20250529165507588"></p><p><strong>题解：</strong></p><p>同样，对于给定的数据范围直接看枚举即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">total=ans=<span class="hljs-number">0</span><br>x,y=RR()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>        total+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(i-j)&gt;=y <span class="hljs-keyword">or</span> i+j&gt;=x:<br>            ans+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans/total)<br></code></pre></td></tr></table></figure><h2 id="C-Security-2"><a href="#C-Security-2" class="headerlink" title="C - Security 2"></a>C - Security 2</h2><p><strong>题意</strong>：</p><p>在 AtCoder 公司门口有一个密码输入装置，包含一个屏幕和两个按钮。屏幕上显示一个字符串 $t$，初始为空串。按钮的功能如下：</p><ul><li>按下按钮 A：在当前字符串末尾添加一个 <code>0</code>；</li><li>按下按钮 B：将字符串中的每一位数字都加 1（<code>9</code> 变为 <code>0</code>，即按模 10 循环）。</li></ul><p>给定目标字符串 $S$，从空字符串开始，通过若干次按键，使得屏幕显示的字符串变为 $S$。请计算所需的最少按键次数。</p><p><strong>数据范围</strong>：</p><p><img src="/./../img/image-20250529165429353-1748509237807-3.png" alt="image-20250529165429353"></p><p><strong>输入</strong></p><p><img src="/./../img/image-20250529165439227-1748509237807-5.png" alt="image-20250529165439227"></p><p><strong>题解：</strong></p><p>直接模拟做不要多想，从后往前考虑，最后一个位置一定要操作nums[-1]次，在操作的过程中前面的位置也一定会出现被连带着操作，因此累加操作次数cur，然后继续向前遍历即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s=RS()<br>n=<span class="hljs-built_in">len</span>(s)<br>cur=ans=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    c=<span class="hljs-built_in">int</span>(s[i])<br>    c=(c-cur)%<span class="hljs-number">10</span><br>    ans+=c+<span class="hljs-number">1</span> <span class="hljs-comment"># 加一是因为在末尾添加一个0</span><br>    cur+=c<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="D-Domino-Covering-XOR"><a href="#D-Domino-Covering-XOR" class="headerlink" title="D - Domino Covering XOR"></a>D - Domino Covering XOR</h2><p><strong>题意</strong>：</p><p>给定一个 $H \times W$ 的网格，每个格子 $(i, j)$ 上有一个非负整数 $A_{i,j}$。你可以在网格上放置若干个多米诺骨牌，每个骨牌覆盖两个相邻的格子（只能是左右相邻或上下相邻），且每个格子至多被一个骨牌覆盖。</p><p>定义得分为<strong>没有被任何骨牌覆盖的格子中的所有整数的按位异或值（XOR）</strong>。</p><p>求最大可能得分。</p><p><strong>数据范围</strong>：</p><p><img src="/./../img/image-20250529165332698-1748509237807-7.png" alt="image-20250529165332698"></p><p><strong>输入</strong></p><p><img src="/./../img/image-20250529165413391-1748509237807-10.png" alt="image-20250529165413391"></p><p><strong>题解：</strong></p><p>一开始这个数据范围没多想就直接上状压DP了，后来样例过不了才反应过来异或值怎么能返回最大</p><p>本题应当使用DFS，直接暴力搜索每个位置是否放骨牌，直接暴力也不行要把每个位置是否选过的状态压缩，不能用集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">m,n=RR()<br>g=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    g.extend(RR())<br><br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">pos,s</span>):<br>    <span class="hljs-keyword">global</span> ans<br>    <span class="hljs-keyword">if</span> pos==n*m:<br>        res=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n*m):<br>            <span class="hljs-keyword">if</span> (s&gt;&gt;i)&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>                res^=g[i]<br>        ans=<span class="hljs-built_in">max</span>(ans,res)<br>        <span class="hljs-keyword">return</span>  <br>    <span class="hljs-keyword">if</span> (s&gt;&gt;pos)&amp;<span class="hljs-number">1</span>:<br>        dfs(pos+<span class="hljs-number">1</span>,s)<br>        <span class="hljs-keyword">return</span> <br>    dfs(pos+<span class="hljs-number">1</span>,s)<br>    x,y=<span class="hljs-built_in">divmod</span>(pos,n)<br>    <span class="hljs-keyword">for</span> dx,dy <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;=(i:=dx+x)&lt;m <span class="hljs-keyword">and</span> <span class="hljs-number">0</span>&lt;=(j:=dy+y)&lt;n:<br>            nx=i*n+j<br>            <span class="hljs-keyword">if</span> s&gt;&gt;nx&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>                dfs(pos+<span class="hljs-number">1</span>,s|(<span class="hljs-number">1</span>&lt;&lt;nx)|(<span class="hljs-number">1</span>&lt;&lt;pos))<br><br>dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="E-Most-Valuable-Parentheses"><a href="#E-Most-Valuable-Parentheses" class="headerlink" title="E - Most Valuable Parentheses"></a>E - Most Valuable Parentheses</h2><p><strong>题意</strong>：</p><p>给定一个长度为 $2N$ 的非负整数序列 $A &#x3D; (A_1, A_2, \dots, A_{2N})$。</p><p>定义括号序列 $s$ 的得分方式如下：</p><ul><li>对于 $s$ 中每一个为右括号 <code>)</code> 的位置 $i$，将 $A_i$ 设为 0，最后对所有 $A$ 中的数求和，得到得分。</li></ul><p>现在请你找出一个<strong>合法的括号序列</strong> $s$（即左右括号配对匹配）使得这个得分最大。</p><p>一共 $T$ 个测试用例，分别求解。</p><p><strong>数据范围</strong>：</p><p><img src="/./../img/image-20250529165312314-1748509237807-8.png" alt="image-20250529165312314"></p><p><strong>输入</strong></p><p><img src="/./../img/image-20250529165255354-1748509237807-9.png" alt="image-20250529165255354"></p><p><strong>题解：</strong></p><p>本题用到了括号序列的经典结论，即如果令左括号为1，右括号为-1，那么对于一个合法的括号序列，它的每个前缀值都大于等于0，且最终和为0。</p><p>那么对于本题有：对于i位置，需要满足右括号的个数不超过<code>i//2</code>，但是最终右括号的的个数应该是n&#x2F;&#x2F;2。</p><p>因此这里维护最小的n&#x2F;&#x2F;2个右括号的，遍历的过程中将遇到的元素放入最大堆(保证最终由n&#x2F;&#x2F;2个右括号)，一旦堆的大小超过了<code>i//2</code>那么就弹出最大值(保证左括号和最大)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(R()):<br>    n=R()<br>    nums=[R() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>*n)]<br>    h=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>*n):<br>        c=(i+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>        heappush(h,-nums[i])<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(h)&gt;c:<br>            heappop(h)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(nums)+<span class="hljs-built_in">sum</span>(h))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>括号序列</tag>
      
      <tag>枚举</tag>
      
      <tag>状压</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 Syzkaller（Linux 内核模糊测试工具）</title>
    <link href="/2025/05/28/Syzkaller%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/28/Syzkaller%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Syzkaller"><a href="#Syzkaller" class="headerlink" title="Syzkaller"></a>Syzkaller</h1><p>截止到5&#x2F;28号，网上的教程大多都有问题，包括官方给的教程，大概是因为版本问题，本人配置syzkaller花费了很长时间以致于内心倍感挫败，在此记录我的安装过程希望对后来者有帮助。</p><h2 id="架构和使用"><a href="#架构和使用" class="headerlink" title="架构和使用"></a>架构和使用</h2><p>Syzkaller是google安全研究人员开发并维护的内核fuzz工具，由go语言编写，含少部分c&#x2F;c++代码。支持多个操作系统内核，如linux、windows、darwin、openbsd等等，其对linux的支持最为全面。</p><p><img src="/./../img/image-20250526154409481-1748396731607-1.png" alt="image-20250526154409481"></p><p>Syzkaller由多个部件组成：</p><ul><li>syz-manager 总管中枢：管理整个模糊测试，启动&#x2F;停止虚拟机，收集 crash和coverage数据，提供Web UI展示测试进展和崩溃详情<ul><li>解析配置文件json格式</li><li>启动多个VM实例并通过SSH部署<code>syz-fuzzer</code>，</li><li>收集VM回传的crash信息，保存日志、生成 repro（复现程序）</li><li>自动保存工作状态到<code>workdir</code>目录，可断点续测</li></ul></li><li>syz-fuzzer 模糊测试引擎：根据目标架构定义，负责生成系统调用序列</li><li>syz-executor syscall执行器： 在内核中运行syscall程序，收集执行的覆盖率数据，监控是否触发了异常</li></ul><p>SSH（Secure shell）是一种安全的远程登陆协议，用于通过网络安全地访问另一台计算机终端，在Syzkaller 中，SSH用于和被测虚拟机进行通信。</p><p>执行过程如下：</p><ol><li>启动syz-manager：执行<code>./bin/syz-manager -config=config.json</code>，其中config.json定义了配置(也可以是cfg格式)。</li><li>启动虚拟机：syz-manager根据配置调用QEMU，模拟环境。</li><li>建立SSH连接：使用SSH登录VM，并把fuzzing所需的syz-executor复制到VM中。</li><li>运行syz-fuzzer：syz-manager自动启动多个syz-fuzzer进程，每个对应一个VM，syz-fuzzer生成系统调用程序</li><li>运行syscall：syz-fuzzer将syscall程序传送给syz-executor，然后开始执行syscall</li><li>数据收集</li></ol><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>选择环境<strong>VMware+Ubuntu</strong> ，<a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">官方文档</a></p><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>下载go语言编译器，版本需要&gt;&#x3D; 1.16 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz<br>tar -xf go1.22.3.linux-amd64.tar.gz<br>mv go go1.22.3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置环境变量</span><br>echo &#x27;export GOROOT=$HOME/run1/go1.22.3&#x27; &gt;&gt; ~/.bashrc<br>echo &#x27;export PATH=$GOROOT/bin:$PATH&#x27; &gt;&gt; ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生效</span><br>source ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否安装成功</span><br>go version<br></code></pre></td></tr></table></figure><p>下载编译syzkaller</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/google/syzkaller<br>cd syzkaller<br>make<br></code></pre></td></tr></table></figure><p>下载编译linux内核，<strong>进行浅克隆</strong>，只获取最新提交，不包含各种提交历史，这样可以拉取更快且节省空间(~200MB)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth=1 --branch v6.6 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux-6.6<br></code></pre></td></tr></table></figure><p>生成默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd linux-6.6<br>make defconfig<br>make kvm_guest.config<br></code></pre></td></tr></table></figure><p>启用 Syzkaller 所需内核配置，即手动修改.config文件中以下项——<code>nano .config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG_KCOV=y                    # 代码覆盖追踪（coverage）<br>CONFIG_DEBUG_INFO_DWARF4=y      # 含符号调试信息（用于 crash 定位）<br>CONFIG_KASAN=y                  # 内存访问错误检测器<br>CONFIG_KASAN_INLINE=y           # KASAN 内联（性能更好）<br>CONFIG_CONFIGFS_FS=y            # Debian Stretch 及以上所需<br>CONFIG_SECURITYFS=y             # Debian 系统安全相关功能<br></code></pre></td></tr></table></figure><p>再次更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make olddefconfig<br></code></pre></td></tr></table></figure><p>编译内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j$(nproc)<br></code></pre></td></tr></table></figure><p>注意这里版本不能太低，否则执行make指令会出现下述错误，选择linux6.6不会出现问题</p><p><img src="/./../img/image-20250528083135579-1748396731607-2.png" alt="image-20250528083135579"></p><p>执行下述指令验证<strong>内核是否编译成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls linux-6.6/vmlinux<br>ls linux-6.6/arch/x86/boot/bzImage<br></code></pre></td></tr></table></figure><p><img src="/./../img/image-20250528083431877-1748396731607-3.png" alt="image-20250528083431877"></p><h3 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h3><p>创建适用于QEMU的Debian系统镜像，用于内核模糊测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建镜像目录</span><br>mkdir ~/run1/stretch-img<br>cd ~/run1/stretch-img<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载官方脚本</span><br>wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">赋予执行权限</span><br>chmod +x create-image.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行脚本，构建镜像</span><br>./create-image.sh --feature full<br></code></pre></td></tr></table></figure><p>注意不能直接写.&#x2F;create-image.sh，否则会默认安装最小系统，会缺失一些功能</p><p>查看结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree -L 1 stretch-img<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">stretch-img<br>├── bullseye<br>├── bullseye.id_rsa<br>├── bullseye.id_rsa.pub<br>├── bullseye.img<br>└── create-image.sh<br></code></pre></td></tr></table></figure><p>编写<code>rc.local</code>，这是Linux系统中一个<strong>用于开机时自动执行自定义命令</strong>的脚本文件。</p><p>这里编写脚本用于<strong>启动虚拟机时自动完成网络配置并启动SSH服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/vm<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/vm<br>cd /mnt/vm<br>sudo nano etc/rc.local<br><br>cd ..<br>sudo umount /mnt/vm<br></code></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 logger 输出信息到系统日志</span><br>logger &quot;Running /etc/rc.local&quot;<br><br>ip link set eth0 up<br>ip addr flush dev eth0<br>ip addr add 10.0.2.15/24 dev eth0<br>ip route add default via 10.0.2.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 SSH 服务</span><br>logger &quot;Starting SSH service...&quot;<br>/etc/init.d/ssh start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结束</span><br>logger &quot;rc.local execution finished.&quot;<br><br>exit 0<br></code></pre></td></tr></table></figure><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h3><p>安装QEMU虚拟机，Syzkaller默认使用QEMU启动虚拟机运行内核进行模糊测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install qemu-system-x86<br></code></pre></td></tr></table></figure><p>测试虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>  -m 2G \<br>  -smp 2 \<br>  -kernel /home/ming/run/linux-6.6/arch/x86/boot/bzImage \<br>  -append &quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot; \<br>  -drive file=/home/ming/run/stretch-img/bullseye.img,format=raw \<br>  -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>  -net nic,model=e1000 \<br>  -enable-kvm \<br>  -nographic \<br>  -pidfile /home/ming/run/vm.pid \<br><span class="hljs-meta prompt_">  2&gt;</span><span class="language-bash">&amp;1 | <span class="hljs-built_in">tee</span> /home/ming/run/vm.log</span><br></code></pre></td></tr></table></figure><p>配置中kernel和drive file要替换为自己的镜像路径，enable-kvm需要虚拟机VMware启动虚拟化</p><p><img src="/./../img/image-20250528085334161-1748396731607-4.png" alt="image-20250528085334161"></p><p>启动成功会出现，默认的账号是root，密码回车即可</p><p><img src="/./../img/image-20250528090441259-1748396731607-5.png" alt="image-20250528090441259"></p><p>测试ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -i ~/run/stretch-img/bullseye.id_rsa -p 10021 root@127.0.0.1<br></code></pre></td></tr></table></figure><p>成功应出现，输出exit即可退出</p><p><img src="/./../img/image-20250528090611606-1748396731608-6.png" alt="image-20250528090611606"></p><h3 id="启动Syzakller"><a href="#启动Syzakller" class="headerlink" title="启动Syzakller"></a>启动Syzakller</h3><p>启动syzkaller(在syzkaller目录下)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/syz-manager -config=my.cfg -debug<br></code></pre></td></tr></table></figure><p>my.cfg指定了syzkaller的配置，使用默认配置替换下路径即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux/amd64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:56741&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;workdir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/syzkaller/workdir&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kernel_obj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/linux-6.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/stretch-img/bullseye.img&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sshkey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/stretch-img/bullseye.id_rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;syzkaller&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/syzkaller&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;procs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qemu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kernel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/linux-6.6/arch/x86/boot/bzImage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意同一时间syzkaller不能和单独的qemu同时执行否则会出现，关闭其中一个即可</p><p><img src="/./../img/image-20250528091003666-1748396731608-7.png" alt="image-20250528091003666"></p><p>在执行过程中出现以下错误</p><p><img src="/./../img/image-20250528091310394-1748396731608-8.png" alt="image-20250528091310394"></p><p>似乎是因为虚拟网卡的问题，经过测试发现，单独的qemu启动使用的是eht0，而syzkaller启动的qemu使用的是enp0s4，不同的机器可能有不同的配置，可以在rc.local添加命令打印出syzkaller所用的网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;[rc.local] Available interfaces:&quot; | tee /dev/console<br>ip a | tee /dev/console<br></code></pre></td></tr></table></figure><p>然后根据输出对照地设置</p><p>目前已知syzkaller使用的是enp0s4，因此更改rc.local以及&#x2F;etc&#x2F;network&#x2F;interfaces</p><p>其中rc.local</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/vm<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/vm<br>cd /mnt/vm<br>sudo nano etc/rc.local<br><br>cd ..<br>sudo umount /mnt/vm<br></code></pre></td></tr></table></figure><p>填入，其实只要修改eth0为enp0s4即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 logger 输出信息到系统日志</span><br>logger &quot;Running /etc/rc.local&quot;<br><br>echo &quot;[rc.local] Available interfaces:&quot; | tee /dev/console<br>ip a | tee /dev/console<br><br>ip link set enp0s4 up<br>ip addr flush dev enp0s4<br>ip addr add 10.0.2.15/24 dev enp0s4<br>ip route add default via 10.0.2.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 SSH 服务</span><br>logger &quot;Starting SSH service...&quot;<br>/etc/init.d/ssh start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结束</span><br>logger &quot;rc.local execution finished.&quot;<br><br>exit 0<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;network&#x2F;interfaces</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/bullseye<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/bullseye<br>sudo nano /mnt/bullseye/etc/network/interfaces<br>sudo umount /mnt/bullseye<br></code></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/network/interfaces.d/*<br><br>auto enp0s4<br>iface enp0s4 inet static<br>    address 10.0.2.15<br>    netmask 255.255.255.0<br>    gateway 10.0.2.2<br></code></pre></td></tr></table></figure><p>完成后再次执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">./<span class="hljs-built_in">bin</span>/syz-manager -config=my.cfg -debug<br></code></pre></td></tr></table></figure><p><img src="/./../img/image-20250528092715153-1748396731608-9.png" alt="image-20250528092715153"></p><p>打开<a href="http://127.0.0.1:56741/%EF%BC%8Csyzkaller%E6%8F%90%E4%BE%9B%E7%9A%84UI%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B7%B2%E7%BB%8F%E6%88%90%E5%8A%9F%E5%9C%A8%E6%89%A7%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E4%BA%86">http://127.0.0.1:56741/，syzkaller提供的UI界面，可以看到已经成功在执行模糊测试了</a></p><p><img src="/./../img/image-20250528092831056-1748396731608-10.png" alt="image-20250528092831056"></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
      <category>Syzkaller</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Syzkaller</tag>
      
      <tag>安装</tag>
      
      <tag>Linux内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

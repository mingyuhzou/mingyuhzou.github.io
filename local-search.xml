<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安装 Syzkaller（Linux 内核模糊测试工具）</title>
    <link href="/2025/05/28/Syzkaller%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/28/Syzkaller%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Syzkaller"><a href="#Syzkaller" class="headerlink" title="Syzkaller"></a>Syzkaller</h1><p>截止到5&#x2F;28号，网上的教程大多都有问题，包括官方给的教程，大概是因为版本问题，本人配置syzkaller花费了很长时间以致于内心倍感挫败，在此记录我的安装过程希望对后来者有帮助。</p><h2 id="架构和使用"><a href="#架构和使用" class="headerlink" title="架构和使用"></a>架构和使用</h2><p>Syzkaller是google安全研究人员开发并维护的内核fuzz工具，由go语言编写，含少部分c&#x2F;c++代码。支持多个操作系统内核，如linux、windows、darwin、openbsd等等，其对linux的支持最为全面。</p><p><img src="/./../img/image-20250526154409481-1748396731607-1.png" alt="image-20250526154409481"></p><p>Syzkaller由多个部件组成：</p><ul><li>syz-manager 总管中枢：管理整个模糊测试，启动&#x2F;停止虚拟机，收集 crash和coverage数据，提供 Web UI 展示测试进展和崩溃详情<ul><li>解析配置文件json格式</li><li>启动多个VM实例并通过SSH部署<code>syz-fuzzer</code>，</li><li>收集VM回传的crash信息，保存日志、生成 repro（复现程序）</li><li>自动保存工作状态到<code>workdir</code>目录，可断点续测</li></ul></li><li>syz-fuzzer 模糊测试引擎：在每个VM内执行，负责生成syscall程序，把生成的程序传给executor执行</li><li>syz-executor syscall执行器： 在内核中运行syscall程序，收集执行的覆盖率数据，监控是否触发了异常</li></ul><p>执行过程如下：</p><ol><li>启动syz-manager：执行<code>./bin/syz-manager -config=config.json</code>，其中config.json定义了配置(也可以是cfg格式)</li><li>启动虚拟机：syz-manager会启动一组VM实例，模拟被检测环境</li><li>启动 syz-fuzzer 子进程：syz-manager为每个VM实例启动一个syz-fuzzer子进程，负责生成 syscall fuzz 程序，并通过 RPC 控制 VM 中的执行器。</li><li>建立SSH连接：使用SSH登录VM，并把fuzzing所需的syz-executor上传进去</li><li>开始模糊测试：虚拟机中运行syz-executor，根据从宿主机 <code>syz-manager</code> 下发的 syscall 程序和参数，不断调用各种系统调用</li><li>Bug 反馈和处理：如果触发了崩溃（比如内核 oops&#x2F;panic），会通过日志、符号解析工具等分析出崩溃点，崩溃信息会通过RPC反馈给syz-manager</li></ol><p>syz-manager通过ssh调用syz-fuzzer，syz-fuzzer和syz-manager之间通过RPC进行通信。syz-fuzzer将输入传给syz-executor，从kernel中读取代码覆盖率信息。syz-executor执行syscall系统调用。</p><p>SSH（Secure shell）是一种安全的远程登陆协议，用于通过网络安全地访问另一台计算机终端，在Syzkaller 中，SSH用于和被测虚拟机进行通信</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>选择环境<strong>VMware+Ubuntu</strong> ，<a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">官方文档</a></p><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>下载go语言编译器，版本需要&gt;&#x3D; 1.16 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz<br>tar -xf go1.22.3.linux-amd64.tar.gz<br>mv go go1.22.3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置环境变量</span><br>echo &#x27;export GOROOT=$HOME/run1/go1.22.3&#x27; &gt;&gt; ~/.bashrc<br>echo &#x27;export PATH=$GOROOT/bin:$PATH&#x27; &gt;&gt; ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生效</span><br>source ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否安装成功</span><br>go version<br></code></pre></td></tr></table></figure><p>下载编译syzkaller</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/google/syzkaller<br>cd syzkaller<br>make<br></code></pre></td></tr></table></figure><p>下载编译linux内核，<strong>进行浅克隆</strong>，只获取最新提交，不包含各种提交历史，这样可以拉取更快且节省空间(~200MB)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth=1 --branch v6.6 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux-6.6<br></code></pre></td></tr></table></figure><p>生成默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd linux-6.6<br>make defconfig<br>make kvm_guest.config<br></code></pre></td></tr></table></figure><p>启用 Syzkaller 所需内核配置，即手动修改.config文件中以下项——<code>nano .config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG_KCOV=y                    # 代码覆盖追踪（coverage）<br>CONFIG_DEBUG_INFO_DWARF4=y      # 含符号调试信息（用于 crash 定位）<br>CONFIG_KASAN=y                  # 内存访问错误检测器<br>CONFIG_KASAN_INLINE=y           # KASAN 内联（性能更好）<br>CONFIG_CONFIGFS_FS=y            # Debian Stretch 及以上所需<br>CONFIG_SECURITYFS=y             # Debian 系统安全相关功能<br></code></pre></td></tr></table></figure><p>再次更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make olddefconfig<br></code></pre></td></tr></table></figure><p>编译内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j$(nproc)<br></code></pre></td></tr></table></figure><p>注意这里版本不能太低，否则执行make指令会出现下述错误，选择linux6.6不会出现问题</p><img src="./../img/image-20250528083135579-1748396731607-2.png" alt="image-20250528083135579" style="zoom:67%;" /><p>执行下述指令验证<strong>内核是否编译成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls linux-6.6/vmlinux<br>ls linux-6.6/arch/x86/boot/bzImage<br></code></pre></td></tr></table></figure><p><img src="/./../img/image-20250528083431877-1748396731607-3.png" alt="image-20250528083431877"></p><h3 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h3><p>创建适用于QEMU的Debian系统镜像，用于内核模糊测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建镜像目录</span><br>mkdir ~/run1/stretch-img<br>cd ~/run1/stretch-img<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载官方脚本</span><br>wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">赋予执行权限</span><br>chmod +x create-image.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行脚本，构建镜像</span><br>./create-image.sh --feature full<br></code></pre></td></tr></table></figure><p>注意不能直接写.&#x2F;create-image.sh，否则会默认安装最小系统，会缺失一些功能</p><p>查看结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree -L 1 stretch-img<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">stretch-img<br>├── bullseye<br>├── bullseye.id_rsa<br>├── bullseye.id_rsa.pub<br>├── bullseye.img<br>└── create-image.sh<br></code></pre></td></tr></table></figure><p>配置网络接口并启动SSH服务，设置rc.local</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/vm<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/vm<br>cd /mnt/vm<br>sudo nano etc/rc.local<br><br>cd ..<br>sudo umount /mnt/vm<br></code></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 logger 输出信息到系统日志</span><br>logger &quot;Running /etc/rc.local&quot;<br><br>ip link set eth0 up<br>ip addr flush dev eth0<br>ip addr add 10.0.2.15/24 dev eth0<br>ip route add default via 10.0.2.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 SSH 服务</span><br>logger &quot;Starting SSH service...&quot;<br>/etc/init.d/ssh start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结束</span><br>logger &quot;rc.local execution finished.&quot;<br><br>exit 0<br></code></pre></td></tr></table></figure><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h3><p>安装QEMU虚拟机，Syzkaller默认使用QEMU启动虚拟机运行内核进行模糊测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install qemu-system-x86<br></code></pre></td></tr></table></figure><p>测试虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>  -m 2G \<br>  -smp 2 \<br>  -kernel /home/ming/run/linux-6.6/arch/x86/boot/bzImage \<br>  -append &quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot; \<br>  -drive file=/home/ming/run/stretch-img/bullseye.img,format=raw \<br>  -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>  -net nic,model=e1000 \<br>  -enable-kvm \<br>  -nographic \<br>  -pidfile /home/ming/run/vm.pid \<br><span class="hljs-meta prompt_">  2&gt;</span><span class="language-bash">&amp;1 | <span class="hljs-built_in">tee</span> /home/ming/run/vm.log</span><br></code></pre></td></tr></table></figure><p>配置中kernel和drive file要替换为自己的镜像路径，enable-kvm需要虚拟机VMware启动虚拟化</p><p><img src="/./../img/image-20250528085334161-1748396731607-4.png" alt="image-20250528085334161"></p><p>启动成功会出现，默认的账号是root，密码回车即可</p><p><img src="/./../img/image-20250528090441259-1748396731607-5.png" alt="image-20250528090441259"></p><p>测试ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -i ~/run/stretch-img/bullseye.id_rsa -p 10021 root@127.0.0.1<br></code></pre></td></tr></table></figure><p>成功应出现，输出exit即可退出</p><p><img src="/./../img/image-20250528090611606-1748396731608-6.png" alt="image-20250528090611606"></p><h3 id="启动Syzakller"><a href="#启动Syzakller" class="headerlink" title="启动Syzakller"></a>启动Syzakller</h3><p>启动syzkaller(在syzkaller目录下)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/syz-manager -config=my.cfg -debug<br></code></pre></td></tr></table></figure><p>my.cfg指定了syzkaller的配置，使用默认配置替换下路径即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux/amd64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:56741&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;workdir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/syzkaller/workdir&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kernel_obj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/linux-6.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/stretch-img/bullseye.img&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sshkey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/stretch-img/bullseye.id_rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;syzkaller&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/syzkaller&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;procs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qemu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kernel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ming/run/linux-6.6/arch/x86/boot/bzImage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意同一时间syzkaller不能和单独的qemu同时执行否则会出现，关闭其中一个即可</p><p><img src="/./../img/image-20250528091003666-1748396731608-7.png" alt="image-20250528091003666"></p><p>在执行过程中出现以下错误</p><p><img src="/./../img/image-20250528091310394-1748396731608-8.png" alt="image-20250528091310394"></p><p>似乎是因为虚拟网卡的问题，经过测试发现，单独的qemu启动使用的是eht0，而syzkaller启动的qemu使用的是enp0s4，不同的机器可能有不同的配置，可以在rc.local添加命令打印出syzkaller所用的网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;[rc.local] Available interfaces:&quot; | tee /dev/console<br>ip a | tee /dev/console<br></code></pre></td></tr></table></figure><p>然后根据输出对照地设置</p><p>目前已知syzkaller使用的是enp0s4，因此更改rc.local以及&#x2F;etc&#x2F;network&#x2F;interfaces</p><p>其中rc.local</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/vm<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/vm<br>cd /mnt/vm<br>sudo nano etc/rc.local<br><br>cd ..<br>sudo umount /mnt/vm<br></code></pre></td></tr></table></figure><p>填入，其实只要修改eht0为enp0s4即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 logger 输出信息到系统日志</span><br>logger &quot;Running /etc/rc.local&quot;<br><br>echo &quot;[rc.local] Available interfaces:&quot; | tee /dev/console<br>ip a | tee /dev/console<br><br>ip link set enp0s4 up<br>ip addr flush dev enp0s4<br>ip addr add 10.0.2.15/24 dev enp0s4<br>ip route add default via 10.0.2.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 SSH 服务</span><br>logger &quot;Starting SSH service...&quot;<br>/etc/init.d/ssh start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结束</span><br>logger &quot;rc.local execution finished.&quot;<br><br>exit 0<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;network&#x2F;interfaces</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /mnt/bullseye<br>sudo mount -o loop /home/ming/run/stretch-img/bullseye.img /mnt/bullseye<br>sudo nano /mnt/bullseye/etc/network/interfaces<br>sudo umount /mnt/bullseye<br></code></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/network/interfaces.d/*<br><br>auto enp0s4<br>iface enp0s4 inet static<br>    address 10.0.2.15<br>    netmask 255.255.255.0<br>    gateway 10.0.2.2<br></code></pre></td></tr></table></figure><p>完成后再次执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">./<span class="hljs-built_in">bin</span>/syz-manager -config=my.cfg -debug<br></code></pre></td></tr></table></figure><p><img src="/./../img/image-20250528092715153-1748396731608-9.png" alt="image-20250528092715153"></p><p>打开<a href="http://127.0.0.1:56741/%EF%BC%8Csyzkaller%E6%8F%90%E4%BE%9B%E7%9A%84UI%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B7%B2%E7%BB%8F%E6%88%90%E5%8A%9F%E5%9C%A8%E6%89%A7%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E4%BA%86">http://127.0.0.1:56741/，syzkaller提供的UI界面，可以看到已经成功在执行模糊测试了</a></p><p><img src="/./../img/image-20250528092831056-1748396731608-10.png" alt="image-20250528092831056"></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
      <category>Syzkaller</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Syzkaller</tag>
      
      <tag>安装</tag>
      
      <tag>Linux内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
